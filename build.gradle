buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.dm.gradle:bundle:0.3' // gradle bundle plugin
    }
}

apply plugin: 'java'
apply plugin: 'maven'

version = '0.1.0.SNAPSHOT'
group = 'net.slintes.webracer'

sourceCompatibility = 1.8

ext {
    // central management of version numbers
    starterVersion = '0.1.0.SNAPSHOT'
    webVersion = '0.1.0.SNAPSHOT'
    raceVersion = '0.1.0.SNAPSHOT'
    trackVersion = '0.1.0.SNAPSHOT'
    trackLongVersion = '0.1.0.SNAPSHOT'
    trackShortVersion = '0.1.0.SNAPSHOT'
}

repositories{
    mavenCentral()
    mavenLocal()
}

// configuration for all subprojects
configure(subprojects.findAll()) { subproject ->

    repositories{
        mavenCentral()
        mavenLocal()
    }

    configurations {
        // simulate maven's "provided" scope
        provided
        compile.extendsFrom configurations.provided
        compile.transitive
    }

    apply plugin: 'java'

    // for maven plugin
    group = "$rootProject.group"

    dependencies {
        provided 'org.apache.felix:org.apache.felix.framework:4.4.1'
    }

}

// configuration for all OSGi subprojects
configure(subprojects.findAll {it.name != 'WebracerStarter'}) { subproject ->
    apply plugin: 'maven'
    apply plugin: 'bundle'
//    bundle {
//        trace = true
//    }

    jar{
        // create fat jar containing all compile dependencies
        from {(configurations.compile - configurations.provided)
                .collect {it.isDirectory() ? it : zipTree(it)}}
    }

}

dependencies {

    // define dependencies to subprojects for the copyToLibs task
    compile project(":WebracerWeb")
    compile project(":WebracerTrack")
    compile project(":WebracerTrackLongImpl")
    compile project(":WebracerTrackShortImpl")
    compile project(":WebracerRace")
    compile project(":WebracerStarter")

}

task copyToLibs(type: Copy, dependsOn: 'jar') {
    // copy all jars to one directory, which then can be used by OSGi framework
    into 'repoOsgi'
    from configurations.runtime
            .filter {it.name.startsWith('Webracer')}
}
jar.finalizedBy copyToLibs
install.finalizedBy copyToLibs

// create/update gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}
